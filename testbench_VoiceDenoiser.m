function out = testbench_VoiceDenoiser
% TESTBENCH_VOICEDENOISER Exercise audio plugin class
% to check for violations of plugin constraints and other errors.
%
% OUT = TESTBENCH_VOICEDENOISER Return the output data from the
% plugin. This is useful to verify that plugin numeric behavior has not
% changed, when you are changing your plugin in ways that should not
% affect that behavior (eg, refactoring code).
%
% You can test whether your MATLAB plugin code is ready for code
% generation by creating and running a mex function from this testbench:
%
%   codegen testbench_VoiceDenoiser    % Create the mex function
%   testbench_VoiceDenoiser_mex        % Run the mex function
%
% You can use this testbench as a template and edit it to meet your
% testing needs. Rename the file to ensure your work is not
% accidentally overwritten and lost by another run of
% validateAudioPlugin.
%
% Automatically generated by validateAudioPlugin 17-Feb-2025 02:03:16 UTC-05:00

% Set basic test parameters
sampleRates = [44100, 48000, 96000, 192000, 32000];
frameSizes = [ 2.^(1:13) 2.^(2:13)-1 2.^(1:13)+1];
totalFrameSize = sum(frameSizes);

% Create output buffer if requested
if nargout > 0
    nout = 1;
    obuf = zeros(totalFrameSize*numel(sampleRates), nout);
    optr = 1;
end

% Instantiate the plugin
plugin = VoiceDenoiser;
% Initialize enumeration to enable code generation
plugin.NoiseProfile = 'Crowd Noise';
plugin.NoiseProfile = 'White Noise';
plugin.NoiseProfile = 'Washing Machine';

% Test at each sample rate
for sampleRate = sampleRates
    paramState = initParamState(plugin);

    % Tell plugin the current sample rate
    setSampleRate(plugin, sampleRate);
    reset(plugin);
    checkForTampering(plugin, paramState, sampleRate, 'Resetting plugin');

    % Create input data: logarithmically swept sine wave
    ibuf = logchirp(20, 20e3, sampleRate, totalFrameSize, 0);
    iptr = 1;

    % Process data using different frame sizes
    for i = 1:numel(frameSizes)
        samplesPerFrame = frameSizes(i);

        val = fromNormalizedBypass(mod(floor((i-1)./1),3)/2);
        plugin.Bypass = val;
        paramState.Bypass = val;
        checkForTampering(plugin, paramState, sampleRate, ...
            'Setting parameter ''Bypass''');

        val = fromNormalizedNoiseProfile(mod(floor((i-1)./3),3)/2);
        plugin.NoiseProfile = val;
        paramState.NoiseProfile = val;
        checkForTampering(plugin, paramState, sampleRate, ...
            'Setting parameter ''NoiseProfile''');

        val = fromNormalizedStrength(mod(floor((i-1)./9),3)/2);
        plugin.Strength = val;
        paramState.Strength = val;
        checkForTampering(plugin, paramState, sampleRate, ...
            'Setting parameter ''Strength''');

        % Get a frame of input data
        in = ibuf(iptr:iptr+samplesPerFrame-1, :);
        iptr = iptr + samplesPerFrame;

        % Run the plugin
        o1 = process(plugin, in(1:samplesPerFrame,1));

        % Save the output data if requested
        if nargout > 0
            obuf(optr:optr+samplesPerFrame-1, :) = o1;
            optr = optr + samplesPerFrame;
        end

        % Verify class and size of outputs
        if ~isa(o1, 'double')
            error('ValidateAudioPlugin:OutputNotDouble', ...
                ['Output 1 is of class %s, ' ...
                'but should have been double.'], ...
                class(o1));
        end
        if size(o1,1) ~= samplesPerFrame
            error('ValidateAudioPlugin:BadOutputFrameSize', ...
                ['Output 1 produced a frame size of %d, ' ...
                'but should have matched the input frame size of %d.'], ...
                size(o1,1), samplesPerFrame);
        end
        if size(o1,2) ~= 1
            error('ValidateAudioPlugin:BadOutputWidth', ...
                ['Width of output 1 was %d, ' ...
                'but should have been 1 (OutputChannels(1)).'], ...
                size(o1,2));
        end
        checkForTampering(plugin, paramState, sampleRate, 'Running plugin');
    end
end

% Return output data if requested
if nargout > 0
    out = obuf;
end
end

function checkForTampering(plugin, paramState, sampleRate, cause)
% Verify parameters were not tampered with
if ~isequal(paramState.Bypass, plugin.Bypass)
    error('ValidateAudioPlugin:ParamChanged', ...
        '%s changed parameter ''Bypass'' from %g to %g.', ...
        cause, paramState.Bypass, plugin.Bypass);
end
if ~isequal(paramState.NoiseProfile, plugin.NoiseProfile)
    error('ValidateAudioPlugin:ParamChanged', ...
        '%s changed parameter ''NoiseProfile'' from ''%s'' to ''%s'.'', ...
        cause, paramState.NoiseProfile, plugin.NoiseProfile);
end
if ~isequal(paramState.Strength, plugin.Strength)
    error('ValidateAudioPlugin:ParamChanged', ...
        '%s changed parameter ''Strength'' from %g to %g.', ...
        cause, paramState.Strength, plugin.Strength);
end
% Verify sample rate was not tampered with
if ~isequal(getSampleRate(plugin), sampleRate)
    error('ValidateAudioPlugin:SampleRateChanged', ...
        '%s changed sample rate from %g to %g.', ...
        cause, sampleRate, getSampleRate(plugin));
end
end

function y = logchirp(f0, f1, Fs, nsamples, initialPhase)
% logarithmically swept sine from f0 to f1 over nsamples, at Fs
y = zeros(nsamples,numel(initialPhase));
instPhi = logInstantaneousPhase(f0, f1, Fs, nsamples);
for i = 1:numel(initialPhase)
    y(:,i) = sin(instPhi + initialPhase(i));
end
end

function phi = logInstantaneousPhase(f0, f1, Fs, n)
final = n-1;
t = (0:final)/final;
t1 = final/Fs;
phi = 2*pi * t1/log(f1/f0) * (f0 * (f1/f0).^(t') - f0);
end

function paramState = initParamState(plugin)
paramState.Bypass = plugin.Bypass;
paramState.NoiseProfile = plugin.NoiseProfile;
paramState.Strength = plugin.Strength;
end

function val = fromNormalizedBypass(normval)
val = logical(floor(0.5 + normval));
end

function val = fromNormalizedNoiseProfile(normval)
idx = floor( 0.5 + normval * 2);
switch idx
    case 0
        val = 'Washing Machine';
    case 1
        val = 'White Noise';
    otherwise
        val = 'Crowd Noise';
end
end

function val = fromNormalizedStrength(normval)
val = 0 + (1-0)*normval;
end
